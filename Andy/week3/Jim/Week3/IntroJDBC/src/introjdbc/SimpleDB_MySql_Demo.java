package introjdbc;

import java.sql.*;



public class SimpleDB_MySql_Demo {
	private Connection conn;
	private String driverClassName;
	private String url;
	private String userName;
	private String password;

	public static void main(String[] args) {

            SimpleDB_MySql_Demo db = new SimpleDB_MySql_Demo();
            db.driverClassName = "com.mysql.jdbc.Driver";
//		db.url = "jdbc:mysql://localhost:3306/sakila";
            db.url = "jdbc:mysql://bit.glassfish.wctc.edu:3306/sakila";
            db.userName = "advjava";
            db.password = "advjava";

            try {
                Class.forName (db.driverClassName);
                db.conn = DriverManager.getConnection(db.url, db.userName, db.password);
            }
            catch ( ClassNotFoundException cnfex ) {
               System.err.println(
                      "Error: Failed to load JDBC driver!" );
               cnfex.printStackTrace();
               System.exit( 1 );  // terminate program
            }
            catch ( SQLException sqlex ) {
               System.err.println( "Error: Unable to connect to database!" );
               sqlex.printStackTrace();
               System.exit( 1 );  // terminate program
            }

            Statement stmt = null;
            ResultSet rs = null;

            //=======================================
            // Do a Query
            //=======================================

            String sql = "SELECT * FROM actor ORDER BY last_name";

            try {
                stmt = db.conn.createStatement();
                rs = stmt.executeQuery(sql);

                System.out.println("============================");
                System.out.println("Output from MySQL Server...");
                System.out.println("============================");

                int count = 0;
                while( rs.next() ) {
                    System.out.println("\nRecord No: " + (count + 1));
                    System.out.println( "ID: " + rs.getInt(1) ); // named field
                    System.out.println( "First Name: " + rs.getObject("first_name").toString() ); // named field
                    System.out.println( "Last Name: " + rs.getString("last_name") );
                    System.out.println( "Last Update: " + rs.getDate("last_update") );
                    count++;
                }
                System.out.println( "==================\n" + count + " records found." );

            //=======================================
            // UPDATE a record
            //=======================================

//                        int recId = 18; // pick an existing id from your search results
//                        sql = "UPDATE actor SET first_name = 'Bob', last_name = 'Smith'"
//                                + " WHERE actor_id = " + recId;

                    // Notice that we use "excuteUpdate" for any write operations
                    // Also notice that this returns an integer for the number of records affected
//                        int updateCount = stmt.executeUpdate(sql);
//                        
            //=======================================
            // INSERT a new record
            //=======================================

                    // No need for an id if it is autogenerated by the database server
//                        sql = "INSERT INTO actor (first_name,last_name)"
//                                + " VALUES('Billy','Carter')";

                    // Notice that we use "excuteUpdate" for any write operations
                    // Also notice that this returns an integer for the number of records affected
//                        updateCount = stmt.executeUpdate(sql);

            //=======================================
            // DELETE a record
            //=======================================

                    // No need for an id if it is autogenerated by the database server
//                        int deleteId = 201; // replace this with an existing id to delete
//                        sql = "DELETE FROM actor WHERE"
//                                + " actor_id = " + deleteId;

                    // Notice that we use "excuteUpdate" for any write operations
                    // Also notice that this returns an integer for the number of records affected
//                        updateCount = stmt.executeUpdate(sql);

            } catch (SQLException sqle) {
                    System.out.println(sqle);
            } catch (Exception e) {
                    System.out.println(e);
            } finally {
                    // Make sure we close the statement and connection objects no matter what.
                    // Since these also throw checked exceptions, we need a nested try-catch
                    try {
                            stmt.close();
                            db.conn.close();
                    } catch(Exception e) {
                            System.out.println(e);
                    }
            }

	}
}
